---
CVE: CVE-2013-2115

security_bulletin: S2-014

nickname_instructions: |
  Nickname is optional. Provide a useful, professional, and catchy nickname for
  this vulnerability. Ideally fewer than 30 characters. This will be shown
  alongside its CVE to make it more easily distinguished from the rest.
nickname: OGNL Reflected XSS

CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 79

curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true

reported_instructions: |
  Was there a date that this vulnerability was reported to the team? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE data.
  Please enter your date in YYYY-MM-DD format.
reported: 2013-02-19

announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE data.
  Please enter your date in YYYY-MM-DD format.
announced: 2013-05-22

description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.
  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.
  Try to still be specific in your description, but remove Struts-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Struts would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.

description: |
  There are tags in Struts (s:url, s:a) that accept an attribute called
  includeParams. It only accepts three values: none, get, and all. If
  a user creates a request using Object-Graph Navigation Language (OGNL)
  in it, this will create a bad request to the server, where a request
  may be able to manipulate context objects with different privileges
  than they should have. This was also caused by a fix for CVE-2013-1966.

bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
bugs: []
fixes_vcc_instructions: |
  Please put the SVN commit number in "commit" below, and any notes about how
  this was discovered in the "note" field.
fixes:
  - commit: d7804297e319c7a12245e1b536e565fcea6d6503
    note: Made allow static method access final
  - commit: fed4f8e8a4ec69b5e7612b92d8ce3e476680474b
    note: Removed translations of urls
vccs:
  - commit: c52cd98c9e9328b675e3601d5cc269a71e05944d
    note: Implemented the translate and decode methods
  - commit: 0c543aef318341ca9bd482e15f1637497b8a4dfd
    note: Made allow static method access boolean

incomplete_fix_instructions: |
  Did the above "fixes" actually fix the vulnerability?
  Please list any fixes for the same issue before and after
  this CVE below.
previous_fixes:
  - commit:
    note:
  - commit:
    note:
future_fixes:
  - commit: b44fa2934fbdcbe5b0c1e2abfc03d08f8771990c
    note: |
      Implemented an isValidSchema function to validate input.

upvotes_instructions: |
  Students: when initially writing this, ignore this upvotes number.
  Once this work is being reviewed, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:

unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?
    Write the reasoning behind your answer in the "answer" field.
    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module. Must be just "true" or "false".
    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
    Must be just "true" or "false".
  answer: |
    There were modifications made to the unit tests in order to test that this
    vulnerability was indeed fixed.
  code: true
  fix: true

discovered:
  question: |
    How was this vulnerability discovered?
    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Apache
    employee (you can tell from their email address). If it's clear that the
    vulnerability was discovered by a contest, fill in the name there.
    The "automated" flag can be true, false, or nil.
    The "apache" flag can be true, false, or nil.
    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in
    "answer".
  answer: |
    The first instance that this was found was in 2013-02. There was an
    incomplete fix
    for this. Then the secondary vulnerability was reported in May, by:
    Eric Kobrin,
    Douglas Rodrigues (Akamai), Coverity Security Research Labratory,
    NSFOCUS Security Team
  date: 2013-05-19
  automated: false
  apache: false
  contest: false

subsystem:
  question: |
    What subsystems was the mistake in?
    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech",
    "renderer"
  answer: URL Rendering Subsystem is what  subsystem was affected.
  name: URL Rendering Subsystem

interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?
    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
    If there are no interesting commits, demonstrate that you completed this
    section
    by explaining what happened between the VCCs and the fix.
  answer: |
    There are no interesting commits between the VCCs and the fixes. The problem
    was
    recognized after the implementation of the VCCs and the fix was the next
    commit that was made on the problem areas.
  commits:
    - commit:
      note:

lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?
    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.
    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.
    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: false
    note:
  least_privilege:
    applies: true
    note: |
      if the OGNL successfully got through, the privileges of the user
      were changed. It shows the importance of preventing this XSS problem, and
      the importance of sanitizing input.
  frameworks_are_optional:
    applies: false
    note:
  native_wrappers:
    applies: false
    note:
  distrust_input:
    applies: true
    note: |
      This was majorly due to XSS. The original fix did not sanitize or even
      validate the input. It just got rid of the transaltion. It still was not
      checking the input til a few commits later (roughly 1 year later).
  security_by_obscurity:
    applies: false
    note:
  serial_killer:
    applies: false
    note:
  environment_variables:
    applies: false
    note:
  secure_by_default:
    applies: false
    note:
  yagni:
    applies: true
    note: The translation was not needed
  complex_inputs:
    applies: false
    note:

mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?
    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?
    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those in the software
    engineering industry would find interesting.
  answer: |
    This was a design problem that also came down to a coding problem.
    It was a design problem because of the translation that was originally
    implemented. It was a coding problem because of the lack of sanitizing the
    user input. The small step of sanitizing input could have prevented this
    vulnerability. The sanitizing input could have been a check for OGNL
    expressions.
